<?php

/**
 * BaseForeignLanguage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name_foreign_language
 * @property string $degree_knowledge_foreign_languages
 * @property Doctrine_Collection $ForeignLanguage
 * 
 * @method string              getNameForeignLanguage()                Returns the current record's "name_foreign_language" value
 * @method string              getDegreeKnowledgeForeignLanguages()    Returns the current record's "degree_knowledge_foreign_languages" value
 * @method Doctrine_Collection getForeignLanguage()                    Returns the current record's "ForeignLanguage" collection
 * @method ForeignLanguage     setNameForeignLanguage()                Sets the current record's "name_foreign_language" value
 * @method ForeignLanguage     setDegreeKnowledgeForeignLanguages()    Sets the current record's "degree_knowledge_foreign_languages" value
 * @method ForeignLanguage     setForeignLanguage()                    Sets the current record's "ForeignLanguage" collection
 * 
 * @package    jobeet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseForeignLanguage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('foreign_language');
        $this->hasColumn('name_foreign_language', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('degree_knowledge_foreign_languages', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));

        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('JobeetJob as ForeignLanguage', array(
             'local' => 'id',
             'foreign' => 'foreign_language_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}